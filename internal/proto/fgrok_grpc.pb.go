// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: internal/proto/fgrok.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HttpTunnelService_Stream_FullMethodName = "/fgrok.v1.HttpTunnelService/Stream"
)

// HttpTunnelServiceClient is the client API for HttpTunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Bidirectional stream for HTTP frames.
// Direction mapping (as per your convention):
// - external → local   : HttpUpstream   (server → tunnel client; frames sent by the server)
// - local    → external: HttpDownstream (tunnel client → server; frames sent by the client)
type HttpTunnelServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HttpDownstream, HttpUpstream], error)
}

type httpTunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpTunnelServiceClient(cc grpc.ClientConnInterface) HttpTunnelServiceClient {
	return &httpTunnelServiceClient{cc}
}

func (c *httpTunnelServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HttpDownstream, HttpUpstream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HttpTunnelService_ServiceDesc.Streams[0], HttpTunnelService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HttpDownstream, HttpUpstream]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HttpTunnelService_StreamClient = grpc.BidiStreamingClient[HttpDownstream, HttpUpstream]

// HttpTunnelServiceServer is the server API for HttpTunnelService service.
// All implementations must embed UnimplementedHttpTunnelServiceServer
// for forward compatibility.
//
// Bidirectional stream for HTTP frames.
// Direction mapping (as per your convention):
// - external → local   : HttpUpstream   (server → tunnel client; frames sent by the server)
// - local    → external: HttpDownstream (tunnel client → server; frames sent by the client)
type HttpTunnelServiceServer interface {
	Stream(grpc.BidiStreamingServer[HttpDownstream, HttpUpstream]) error
	mustEmbedUnimplementedHttpTunnelServiceServer()
}

// UnimplementedHttpTunnelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHttpTunnelServiceServer struct{}

func (UnimplementedHttpTunnelServiceServer) Stream(grpc.BidiStreamingServer[HttpDownstream, HttpUpstream]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedHttpTunnelServiceServer) mustEmbedUnimplementedHttpTunnelServiceServer() {}
func (UnimplementedHttpTunnelServiceServer) testEmbeddedByValue()                           {}

// UnsafeHttpTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpTunnelServiceServer will
// result in compilation errors.
type UnsafeHttpTunnelServiceServer interface {
	mustEmbedUnimplementedHttpTunnelServiceServer()
}

func RegisterHttpTunnelServiceServer(s grpc.ServiceRegistrar, srv HttpTunnelServiceServer) {
	// If the following call pancis, it indicates UnimplementedHttpTunnelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HttpTunnelService_ServiceDesc, srv)
}

func _HttpTunnelService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HttpTunnelServiceServer).Stream(&grpc.GenericServerStream[HttpDownstream, HttpUpstream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HttpTunnelService_StreamServer = grpc.BidiStreamingServer[HttpDownstream, HttpUpstream]

// HttpTunnelService_ServiceDesc is the grpc.ServiceDesc for HttpTunnelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HttpTunnelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fgrok.v1.HttpTunnelService",
	HandlerType: (*HttpTunnelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _HttpTunnelService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/fgrok.proto",
}

const (
	TcpTunnelService_Stream_FullMethodName = "/fgrok.v1.TcpTunnelService/Stream"
)

// TcpTunnelServiceClient is the client API for TcpTunnelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Bidirectional stream for TCP frames.
// Direction mapping (as per your convention):
// - external → local   : TcpUpstream   (server → tunnel client; frames sent by the server)
// - local    → external: TcpDownstream (tunnel client → server; frames sent by the client)
type TcpTunnelServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TcpDownstream, TcpUpstream], error)
}

type tcpTunnelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTcpTunnelServiceClient(cc grpc.ClientConnInterface) TcpTunnelServiceClient {
	return &tcpTunnelServiceClient{cc}
}

func (c *tcpTunnelServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TcpDownstream, TcpUpstream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TcpTunnelService_ServiceDesc.Streams[0], TcpTunnelService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TcpDownstream, TcpUpstream]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TcpTunnelService_StreamClient = grpc.BidiStreamingClient[TcpDownstream, TcpUpstream]

// TcpTunnelServiceServer is the server API for TcpTunnelService service.
// All implementations must embed UnimplementedTcpTunnelServiceServer
// for forward compatibility.
//
// Bidirectional stream for TCP frames.
// Direction mapping (as per your convention):
// - external → local   : TcpUpstream   (server → tunnel client; frames sent by the server)
// - local    → external: TcpDownstream (tunnel client → server; frames sent by the client)
type TcpTunnelServiceServer interface {
	Stream(grpc.BidiStreamingServer[TcpDownstream, TcpUpstream]) error
	mustEmbedUnimplementedTcpTunnelServiceServer()
}

// UnimplementedTcpTunnelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTcpTunnelServiceServer struct{}

func (UnimplementedTcpTunnelServiceServer) Stream(grpc.BidiStreamingServer[TcpDownstream, TcpUpstream]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTcpTunnelServiceServer) mustEmbedUnimplementedTcpTunnelServiceServer() {}
func (UnimplementedTcpTunnelServiceServer) testEmbeddedByValue()                          {}

// UnsafeTcpTunnelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TcpTunnelServiceServer will
// result in compilation errors.
type UnsafeTcpTunnelServiceServer interface {
	mustEmbedUnimplementedTcpTunnelServiceServer()
}

func RegisterTcpTunnelServiceServer(s grpc.ServiceRegistrar, srv TcpTunnelServiceServer) {
	// If the following call pancis, it indicates UnimplementedTcpTunnelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TcpTunnelService_ServiceDesc, srv)
}

func _TcpTunnelService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TcpTunnelServiceServer).Stream(&grpc.GenericServerStream[TcpDownstream, TcpUpstream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TcpTunnelService_StreamServer = grpc.BidiStreamingServer[TcpDownstream, TcpUpstream]

// TcpTunnelService_ServiceDesc is the grpc.ServiceDesc for TcpTunnelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TcpTunnelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fgrok.v1.TcpTunnelService",
	HandlerType: (*TcpTunnelServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TcpTunnelService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/fgrok.proto",
}
