// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.27.2
// source: internal/proto/fgrok.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Upstream HTTP frame (server → tunnel client).
type HttpUpstream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique request ID generated by the server and echoed by the client.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Raw HTTP wire data (request/response bytes depending on processing stage).
	Payload       []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpUpstream) Reset() {
	*x = HttpUpstream{}
	mi := &file_internal_proto_fgrok_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpUpstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpUpstream) ProtoMessage() {}

func (x *HttpUpstream) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_fgrok_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpUpstream.ProtoReflect.Descriptor instead.
func (*HttpUpstream) Descriptor() ([]byte, []int) {
	return file_internal_proto_fgrok_proto_rawDescGZIP(), []int{0}
}

func (x *HttpUpstream) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *HttpUpstream) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Downstream HTTP frame (tunnel client → server).
type HttpDownstream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Corresponding request ID that pairs with HttpUpstream.request_id.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Raw HTTP wire data (request/response bytes depending on processing stage).
	Payload       []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpDownstream) Reset() {
	*x = HttpDownstream{}
	mi := &file_internal_proto_fgrok_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpDownstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDownstream) ProtoMessage() {}

func (x *HttpDownstream) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_fgrok_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDownstream.ProtoReflect.Descriptor instead.
func (*HttpDownstream) Descriptor() ([]byte, []int) {
	return file_internal_proto_fgrok_proto_rawDescGZIP(), []int{1}
}

func (x *HttpDownstream) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *HttpDownstream) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Upstream TCP frame (server → tunnel client).
type TcpUpstream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique TCP connection identifier generated by the server and echoed by the client.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Raw TCP payload bytes.
	Payload       []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpUpstream) Reset() {
	*x = TcpUpstream{}
	mi := &file_internal_proto_fgrok_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpUpstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpUpstream) ProtoMessage() {}

func (x *TcpUpstream) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_fgrok_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpUpstream.ProtoReflect.Descriptor instead.
func (*TcpUpstream) Descriptor() ([]byte, []int) {
	return file_internal_proto_fgrok_proto_rawDescGZIP(), []int{2}
}

func (x *TcpUpstream) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *TcpUpstream) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Downstream TCP frame (tunnel client → server).
type TcpDownstream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Corresponding connection ID that pairs with TcpUpstream.connection_id.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Raw TCP payload bytes.
	Payload       []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpDownstream) Reset() {
	*x = TcpDownstream{}
	mi := &file_internal_proto_fgrok_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpDownstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpDownstream) ProtoMessage() {}

func (x *TcpDownstream) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_fgrok_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpDownstream.ProtoReflect.Descriptor instead.
func (*TcpDownstream) Descriptor() ([]byte, []int) {
	return file_internal_proto_fgrok_proto_rawDescGZIP(), []int{3}
}

func (x *TcpDownstream) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *TcpDownstream) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_internal_proto_fgrok_proto protoreflect.FileDescriptor

const file_internal_proto_fgrok_proto_rawDesc = "" +
	"\n" +
	"\x1ainternal/proto/fgrok.proto\x12\bfgrok.v1\"G\n" +
	"\fHttpUpstream\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\"I\n" +
	"\x0eHttpDownstream\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\"L\n" +
	"\vTcpUpstream\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\"N\n" +
	"\rTcpDownstream\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload2U\n" +
	"\x11HttpTunnelService\x12@\n" +
	"\x06Stream\x12\x18.fgrok.v1.HttpDownstream\x1a\x16.fgrok.v1.HttpUpstream\"\x00(\x010\x012R\n" +
	"\x10TcpTunnelService\x12>\n" +
	"\x06Stream\x12\x17.fgrok.v1.TcpDownstream\x1a\x15.fgrok.v1.TcpUpstream\"\x00(\x010\x01B2Z0github.com/flrossetto/fgrok/internal/proto;protob\x06proto3"

var (
	file_internal_proto_fgrok_proto_rawDescOnce sync.Once
	file_internal_proto_fgrok_proto_rawDescData []byte
)

func file_internal_proto_fgrok_proto_rawDescGZIP() []byte {
	file_internal_proto_fgrok_proto_rawDescOnce.Do(func() {
		file_internal_proto_fgrok_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_proto_fgrok_proto_rawDesc), len(file_internal_proto_fgrok_proto_rawDesc)))
	})
	return file_internal_proto_fgrok_proto_rawDescData
}

var file_internal_proto_fgrok_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_internal_proto_fgrok_proto_goTypes = []any{
	(*HttpUpstream)(nil),   // 0: fgrok.v1.HttpUpstream
	(*HttpDownstream)(nil), // 1: fgrok.v1.HttpDownstream
	(*TcpUpstream)(nil),    // 2: fgrok.v1.TcpUpstream
	(*TcpDownstream)(nil),  // 3: fgrok.v1.TcpDownstream
}
var file_internal_proto_fgrok_proto_depIdxs = []int32{
	1, // 0: fgrok.v1.HttpTunnelService.Stream:input_type -> fgrok.v1.HttpDownstream
	3, // 1: fgrok.v1.TcpTunnelService.Stream:input_type -> fgrok.v1.TcpDownstream
	0, // 2: fgrok.v1.HttpTunnelService.Stream:output_type -> fgrok.v1.HttpUpstream
	2, // 3: fgrok.v1.TcpTunnelService.Stream:output_type -> fgrok.v1.TcpUpstream
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_internal_proto_fgrok_proto_init() }
func file_internal_proto_fgrok_proto_init() {
	if File_internal_proto_fgrok_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_proto_fgrok_proto_rawDesc), len(file_internal_proto_fgrok_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_internal_proto_fgrok_proto_goTypes,
		DependencyIndexes: file_internal_proto_fgrok_proto_depIdxs,
		MessageInfos:      file_internal_proto_fgrok_proto_msgTypes,
	}.Build()
	File_internal_proto_fgrok_proto = out.File
	file_internal_proto_fgrok_proto_goTypes = nil
	file_internal_proto_fgrok_proto_depIdxs = nil
}
